#!/bin/bash

###################################################################
#  ___             _  __ 
# / _ \ _ ____   _(_)/ _|
#| | | | '_ \ \ / / | |_ 
#| |_| | | | \ V /| |  _|
# \___/|_| |_|\_/ |_|_|  
#                        
#           _                    _         __ _ _            _     
# _ __ ___ | | ___ __ ___   __ _| | _____ / _(_) | ___   ___| |__  
#| '_ ` _ \| |/ / '_ ` _ \ / _` | |/ / _ \ |_| | |/ _ \ / __| '_ \ 
#| | | | | |   <| | | | | | (_| |   <  __/  _| | |  __/_\__ \ | | |
#|_| |_| |_|_|\_\_| |_| |_|\__,_|_|\_\___|_| |_|_|\___(_)___/_| |_|
#
# generate an makefile to generate gsoap code based on onvif's wsdl.                                                            

#-----[ＶＡＲＩＡＢＬＥＳ  ＡＬＬＯＷＥＤ  ＴＯ  ＣＨＡＮＧＥ]----#

# typemap.dat gsoap file
TYPEMAP_FILE=

# remove generated .h file
#  ( do not remove it is usefulfor debugin porpose )
REMOVE_GENERATED_H=1

# Enable WS-Security Plugin
WS_SECURITY_PLUGIN=1

# Name of env code
ENV_MODULE=secenv


#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#! 			ＢＥ  ＣＡＲＥＦＵＬ：			  !
#!	 ＥＸＩＴＩＮＧ  ＳＡＦＥ ＴＯ ＥＤＩＴ  ＰＬＡＣＥ 	  !
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

#┏┓╻┏━┓┏━┓┏━╸╻┏━┓╻┏━┓┏┳┓
#┃┗┫┣━┫┣┳┛┃  ┃┗━┓┃┗━┓┃┃┃
#╹ ╹╹ ╹╹┗╸┗━╸╹┗━┛╹┗━┛╹ ╹
# program narcisism -----------------------------------------------

SCRIPT_NAME=mkmakefile.sh
VERSION=0.1
DATE=$(date)

COMMAND="$0"
MKMKFILE_SCRIPT="$(basename $COMMAND)"
MKMKFILE_PATH="${COMMAND%/${MKMKFILE_SCRIPT}}"
WSDL_FILE="${MKMKFILE_PATH}/wsdl.txt"

echo "# ---------------------------------------------"
echo "# code generated by ${SCRIPT_NAME} - ${DATE}"
echo "# version ${DATE}"
echo "# based file: ${WSDL_FILE}"
echo "# ---------------------------------------------"
echo


#┏━╸╻ ╻┏┓╻┏━╸╺┳╸╻┏━┓┏┓╻┏━┓
#┣╸ ┃ ┃┃┗┫┃   ┃ ┃┃ ┃┃┗┫┗━┓
#╹  ┗━┛╹ ╹┗━╸ ╹ ╹┗━┛╹ ╹┗━┛
##########################

# var_envelope - encapsulates the variable for for echo the format ${VARIABLE}
var_envelope(){
	local var="$1"
	echo '${'"$var"'}'
}

# mkurl <module_name> <url>
mkurl(){
	local module_name="$1"
	local MODULE_NAME="${module_name^^}"
	local url="$2"
	echo "${MODULE_NAME}_WSDL_URL=\"$url\""
}

# mkpath <module_name>
mkpath(){
	local module_name="$1"
	local MODULE_NAME="${module_name^^}"
	echo "${MODULE_NAME}_PATH=${module_name}"
}

# mkheader <module_name>
mkheader(){
	local module_name="$1"
	local MODULE_NAME="${module_name^^}"
	local envar_path="$(var_envelope ${MODULE_NAME}_PATH)"
	
	echo "${MODULE_NAME}_HEADER=${envar_path}/${module_name}.h"
}

# mknamespace <module_name>
mknamespace(){
	local module_name="$1"
	local MODULE_NAME="${module_name^^}"
	local MODULE_NAMESPACE="${module_name^}"
	
	echo "${MODULE_NAME}_NAMESPACE=${MODULE_NAMESPACE}"
}

# makecppheader <module_name>
makecppheader(){
	local module_name="$1"
	local MODULE_NAME="${module_name^^}"
	local envar_path="$(var_envelope ${MODULE_NAME}_PATH)"

	echo "${MODULE_NAME}_CPP_HEADER=${envar_path}/${module_name}.hpp"
}

# path_rule <module_name>
path_rule(){
	local module_name="$1"
	local MODULE_NAME="${module_name^^}"
	local envar="$(var_envelope ${MODULE_NAME}_PATH)"

	echo "${envar}:"
	echo -e "\t[ -d $envar ] || mkdir $envar"
}


# header_rule <module_name>
header_rule(){
	local module_name="$1"
	local MODULE_NAME="${module_name^^}"
	local envar_path="$(var_envelope ${MODULE_NAME}_PATH)"
	local envar_url="$(var_envelope ${MODULE_NAME}_WSDL_URL)"
	local envar_header="$(var_envelope ${MODULE_NAME}_HEADER)"
	local envar_namespace="$(var_envelope ${MODULE_NAME}_NAMESPACE)"
	local include_typemap="${TYPEMAP_FILE:+-t ${TYPEMAP_FILE}}"

	echo "${envar_header}: ${envar_path}"
	echo -e "\twsdl2h -Pxq ${envar_namespace} -o ${envar_header} ${include_typemap} ${envar_url}"
}

# cpp_header_rule(){
cpp_header_rule(){
	local module_name="$1"
	local MODULE_NAME="${module_name^^}"
	local envar_path="$(var_envelope ${MODULE_NAME}_PATH)"
	local envar_url="$(var_envelope ${MODULE_NAME}_WSDL_URL)"
	local envar_h="$(var_envelope ${MODULE_NAME}_HEADER)"
	local envar_header="$(var_envelope ${MODULE_NAME}_CPP_HEADER)"
	local envar_includes="$(var_envelope ${MODULE_NAME}_FIND_INCLUDES)"
	
	echo "${MODULE_NAME}_FIND_INCLUDES:=find ${envar_path} -regextype posix-awk -regex '.*\.(h|nsmap)'"
	echo "${envar_header}: ${module_name}_client_proxy"

	# generate the defines
	hpp_pre_includes="\
/* @file @${envar_header}\\\n\
 * @brief	simple includes of namespace map and headers \\\n\
 *		of onvif's module ${module_name}. \\\n\
 */ \\\n\
#ifndef _${MODULE_NAME}_HPP_ \\\n\
#define _${MODULE_NAME}_HPP_"


	hpp_post_includes="\
#endif // end of _${MODULE_NAME}_HPP_"

	# echo pre_include > file.hpp
	# for every file to include
	#	echo "#include file" >> file.hpp
	# echo post_includes >> file.hpp

	script="\
\t@echo \"${hpp_pre_includes}\" > ${envar_header}
\t@for file_to_include in \$\$( ${envar_includes} ) ; \\
\tdo \\
\t\t echo \"#include \\\"\$\$( basename \$\${file_to_include} )\\\"\" ;\\
\tdone >> ${envar_header}
\t@echo \"${hpp_post_includes}\" >> ${envar_header}"

	echo -e "$script"

}

# proxy_rule <module_name>
proxy_rule(){
	local module_name="$1"
	local MODULE_NAME="${module_name^^}"
	local envar_path="$(var_envelope ${MODULE_NAME}_PATH)"
	local envar_header="$(var_envelope ${MODULE_NAME}_HEADER)"
	local envar_gsoap="$(var_envelope GSOAP_PATH)"
	local FIXPROX_PATH=./.fixprox

	echo "${module_name}_client_proxy: ${FIXPROX_PATH}/fixprox.sh ${envar_header} ${envar_gsoap}"
	echo -e "\tsoapcpp2 -jnCI${envar_gsoap} -xd${envar_path} ${envar_header}"
	echo -e "\t${FIXPROX_PATH}/fixprox.sh ${envar_path}/*C.cpp"

	if [ "${REMOVE_GENERATED_H}" -eq 1 ]
	then
		echo -e "\t@echo Cleaning..."
		echo -e "\trm -v ${envar_header}"
	fi
}

# env_rule
env_rule(){
	local ENV_HEADER=""
	if [ "${WS_SECURITY_PLUGIN}" -eq 1 ]
	then
		ENV_HEADER="#import \\\"wsse.h\\\""
	fi

	local ENV_RULE="\
${ENV_MODULE}:
	[ -d ${ENV_MODULE} ] || mkdir -v ${ENV_MODULE}
	echo "\"${ENV_HEADER}\"" > ${ENV_MODULE}/${ENV_MODULE}.h
	soapcpp2 -p${ENV_MODULE} -d ${ENV_MODULE} ${ENV_MODULE}/${ENV_MODULE}.h
"
	echo "${ENV_RULE}"
}


#┏━╸┏━╸┏━┓╺┓ ┏━┓┏━┓
#┗━┓┃  ┣┳┛ ┃ ┣━┛  ┃
#┗━┛┗━╸╹┗╸╺┻╸╹    ╹
# s  c  r  i  p  t
###################


# copy the directory 
if [ ! $(diff "${MKMKFILE_PATH}/fixprox" "${PWD}/fixprox" &> /dev/null ) ]
then
	cp -r ${MKMKFILE_PATH}/fixprox ./.fixprox
fi

URL=
BASENAME=
PROXY_CLIENT=
HPP_HEADER=

# build arrays
i=0
while read url
do
	base="$(basename "$url")"
	URL[$i]="$url"
	BASENAME[$i]="${base%%.*}"
	PROXY_CLIENT[$i]="${BASENAME[$i],,}_client_proxy"
	HPP_HEADER[$i]="${BASENAME[$i]}/${BASENAME[$i]}.hpp"

	i=$(( i+1 ))

done < ${WSDL_FILE}

# makefile's header
echo "all: ${HPP_HEADER[@]} env"
echo
echo "GSOAP_PATH=/usr/share/gsoap/"

# url variables
echo
echo "# urls"
for (( i=0; i<"${#URL[@]}"; i++ ))
do
	mkurl "${BASENAME[$i]}" "${URL[$i]}"
done


# dir variables
echo
echo "# paths"
for (( i=0; i<"${#URL[@]}"; i++ ))
do
	mkpath "${BASENAME[$i]}"
done

# header variables
echo
echo "# headers"
for (( i=0; i<"${#URL[@]}"; i++ ))
do
	mkheader "${BASENAME[$i]}"
done

# namespace variables
echo
echo "# namespaces"
for (( i=0; i<"${#URL[@]}"; i++ ))
do
	mknamespace "${BASENAME[$i]}"
done

# header variables
echo
echo "# cpp headers"
for (( i=0; i<"${#URL[@]}"; i++ ))
do
	makecppheader "${BASENAME[$i]}"
done

# env rule
env_rule

# dir rules
echo
echo "# PATH RULES---------------------------------------------------------"
for (( i=0; i<"${#URL[@]}"; i++ ))
do
	path_rule "${BASENAME[$i]}"
	echo
done

# header rules
echo
echo "# HEADERS RULES------------------------------------------------------"
for (( i=0; i<"${#URL[@]}"; i++ ))
do
	header_rule "${BASENAME[$i]}"
	echo
done

# proxies rules
echo
echo "# PROXIES RULES------------------------------------------------------"
for (( i=0; i<"${#URL[@]}"; i++ ))
do
	proxy_rule "${BASENAME[$i]}"
	echo
done

# header cpp rules
echo
echo "# CPP HEADERS RULES--------------------------------------------------"
for (( i=0; i<"${#URL[@]}"; i++ ))
do
	cpp_header_rule "${BASENAME[$i]}"
	echo
done
